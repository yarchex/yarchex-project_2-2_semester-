from aiogram import types
from aiogram.dispatcher import FSMContext
from filters.admin_filter import IsAdminFilter
from models.order import Order

@dp.message_handler(IsAdminFilter(), commands=["stats"])
async def cmd_stats(message: types.Message):
    stats = Order.get_stats()  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['total']}\n"
        f"‚Ä¢ –ù–∞ —Å—É–º–º—É: {stats['total_amount']} ¬•"
    )

@dp.message_handler(IsAdminFilter(), commands=["broadcast"])
async def cmd_broadcast(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state("broadcast_message")

@dp.message_handler(state="broadcast_message")
async def process_broadcast(message: types.Message, state: FSMContext):
    users = Order.get_all_users()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in users:
        try:
            await bot.send_message(user.id, message.text)
        except Exception as e:
            logging.error(f"Broadcast error for {user.id}: {e}")
    await state.finish()
